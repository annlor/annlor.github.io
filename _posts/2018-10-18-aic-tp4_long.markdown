---
layout: post
title:  "tp4 AIC - classification de textes"
date:   2018-10-18 22:21:46 +0200
categories: ens aic
---

L'objectif de ce TP est de tester des méthodes de classification de textes. Vous utiliserez le framework keras.

Pour cela, il vous faudra installer les packages keras et tensorflow:
- `source envtp/bin/activate` pour vous mettre dans l'environnement de tp
- puis `pip install tensorflow`
- et `pip install keras`

# Classification binaire de textes: analyse de sentiments 
## Jeu de données IMDB

- 50 000 commentaires très polarisés extraits de la base Internet Movie Database
- 25 000 entraînement et 25 000 test
- 50% de commentaires positifs et 50% de commentaires négatifs dans chaque
- disponible sous forme déjà prétraitée dans Keras: mots -> entiers

Pour charger le jeu de données:
```from keras.datasets import imdb
(train_data, train_labels), (test_data, test_labels) = imdb.load_data(num_words=10000)```

L'argument `num_words=10000` indique que vous ne gardez que les 10 000 mots les plus fréquents de l'ensemble d'entraînement.

Les variables `train_data` et `test_data` sont des listes de commentaires. Chaque commentaire est une liste d'indices de mots. Les variables `train_labels` et `test_labels` sont des listes de 0 et 1, avec 0 pour indiquer des commentaires négatifs, et 1 des commentaires positifs.

## Préparation des données
Transformer les listes en vecteurs one-hot.


`import numpy as np
def vectorize_sequences(sequences, dimension=10000):
    results = np.zeros((len(sequences), dimension))
    for i, sequence in enumerate(sequences):
        results[i, sequence] = 1.
    return results

x_train = vectorize_sequences(train_data)
x_test = vectorize_sequences(test_data)

y_train = np.asarray(train_labels).astype('float32')
y_test = np.asarray(test_labels).astype('float32')

`
## Création du modèle

`
from keras import models
from keras import layers
model = models.Sequential()
model.add(layers.Dense(16, activation='relu', input_shape=(10000,)))
model.add(layers.Dense(16, activation='relu'))
model.add(layers.Dense(1, activation='sigmoid'))

`

et
`
model.compile(optimizer='rmsprop', loss='binary_crossentropy', metrics=['accuracy'])
`

## Création de l'ensemble de validation

`
x_val = x_train[:10000]
partial_x_train = x_train[10000:]
y_val = y_train[:10000]
partial_y_train = y_train[10000:]
`

## Entrainement
`
history = model.fit(partial_x_train, partial_y_train, epochs=20, batch_size=512, validation_data=(x_val, y_val))

`


## Affichage des informations

### Loss
`
import matplotlib.pyplot as plt

history_dict = history.history
loss_values = history_dict['loss']
val_loss_values = history_dict['val_loss']

epochs = range(1, len(acc) + 1)

plt.plot(epochs, loss_values, 'bo', label='Training loss')
plt.plot(epochs, val_loss_values, 'b', label='Validation loss')
plt.title('Training and validation loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()
plt.show()

`

### Accuracy
`
plt.clf()
acc_values = history_dict['acc']
val_acc_values = history_dict['val_acc']

plt.plot(epochs, acc, 'bo', label='Training acc')
plt.plot(epochs, val_acc, 'b', label='Validation acc')
plt.title('Training and validation accuracy')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()
plt.show()
`

Qu'observez-vous ? Pourquoi ?

## Test du modèle

`
model = models.Sequential()
model.add(layers.Dense(16, activation='relu', input_shape=(10000,)))
model.add(layers.Dense(16, activation='relu'))
model.add(layers.Dense(1, activation='sigmoid'))
model.compile(optimizer='rmsprop', loss='binary_crossentropy', metrics=['accuracy'])


model.fit(x_train, y_train, epochs=4, batch_size=512)
results = model.evaluate(x_test, y_test)`

Vous devriez obtenir une accuracy d'environ 88%. Les modèles état de l'art obtiennent près de 95%.

Pour utiliser ensuite ce modèle!
`model.predict(x_test)`

## Tester d'autres choix d'architecture
- 1 ou 3 couches
- dimension de la couche d'entrée: 32 ou 64
- fonction de loss `mse`
- ... 

# Classification multi-classes: dépêches Reuters

## Jeu de données Reuters
